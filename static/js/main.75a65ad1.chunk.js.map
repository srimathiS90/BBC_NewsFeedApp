{"version":3,"sources":["components/News/NewSingle.js","components/News/News.js","components/App.js","serviceWorker.js","index.js"],"names":["NewSingle","item","className","src","urlToImage","alt","title","source","name","href","url","target","News","props","state","news","fetch","then","response","json","data","setState","articles","catch","error","console","log","this","map","keys","renderItems","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAqBeA,EAnBG,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACd,yBAAKC,UAAU,UACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKF,EAAKG,WAAYC,IAAKJ,EAAKK,QACrC,0BAAMJ,UAAU,cAAcD,EAAKM,OAAOC,OAE9C,yBAAKN,UAAU,gBACX,2BAAID,EAAKK,QAEb,yBAAKJ,UAAU,eACX,uBAAGO,KAAMR,EAAKS,IAAKC,OAAO,UAA1B,oBC4BDC,E,YArCf,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAK,IAHM,E,iFAME,IAAD,OAEhBC,MADW,iGAEVC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACH,EAAKC,SAAS,CACVN,KAAMK,EAAKE,cAIlBC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,Q,oCAI1B,OAAOG,KAAKb,MAAMC,KAAKa,KAAI,SAAC3B,GAAD,OACvB,kBAAC,EAAD,CAAW4B,KAAM5B,EAAKS,IAAKT,KAAOA,S,+BAItC,OACI,yBAAKC,UAAU,OACVyB,KAAKG,mB,GA9BHC,aCaJC,MAZf,WACE,OACE,yBAAK9B,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,kBAGF,kBAAC,EAAD,QCCc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.75a65ad1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NewSingle = ({item}) => (\r\n    <div className=\"col s4\">\r\n        <div className=\"card\">\r\n            <div className=\"card-image\">\r\n                <img src={item.urlToImage} alt={item.title} />\r\n                <span className=\"card-title\">{item.source.name}</span>\r\n            </div>\r\n            <div className=\"card-content\">\r\n                <p>{item.title}</p>\r\n            </div>\r\n            <div className=\"card-action\">\r\n                <a href={item.url} target=\"blank_\">Full article</a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n   \r\n);\r\n\r\n\r\nexport default NewSingle;\r\n","import React, {Component} from 'react';\r\nimport NewSingle  from './NewSingle';\r\n\r\nclass News extends Component{\r\nconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        news:[],\r\n    };\r\n}\r\ncomponentDidMount() {\r\n    const url ='https://newsapi.org/v2/top-headlines?sources=bbc-news&apiKey=c90a1f6b706f494aab4a4f43fedf422c';\r\n    fetch(url)\r\n    .then((response) => {\r\n        return response.json();\r\n    })\r\n    .then((data) => {\r\n        this.setState({\r\n            news: data.articles\r\n        })\r\n        \r\n    })\r\n    .catch((error) => console.log(error));\r\n}\r\n\r\n    renderItems() {\r\n        return this.state.news.map((item) => (\r\n            <NewSingle keys={item.url} item ={item} />\r\n        ));\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                {this.renderItems()}\r\n            </div>\r\n                \r\n           \r\n        );\r\n    }\r\n}\r\n\r\nexport default News;","import React from 'react';\nimport './App.css';\nimport News from './News/News';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">BBC News Feed</h1>\n       \n      </header>\n      <News />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}